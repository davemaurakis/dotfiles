set nocompatible
syntax enable
set encoding=utf-8

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" load plugins
call plug#begin('~/.vim/plugged')
source $HOME/.vim/packages.vim
call plug#end()

call togglebg#map("<F5>")

set shell=/bin/zsh

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDComment
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <c-_><c-_> <Plug>NERDCommenterToggle
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF (replaces Ctrl-P)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Ag as default command)
let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'

set rtp+=/usr/local/opt/fzf
set rtp+=~/.fzf

" insert mode fuzzy search
imap <c-x><c-l> <plug>(fzf-complete-line)

" Customize fzf window size
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8 } }

" Customize fzf colors to match color scheme
let g:fzf_colors = {
  \ 'fg':      ['fg', 'FzfFg'],
  \ 'bg':      ['bg', 'FzfBg'],
  \ 'hl':      ['fg', 'FzfHl'],
  \ 'fg+':     ['fg', 'FzfFgCurrent'],
  \ 'bg+':     ['bg', 'FzfBgCurrent'],
  \ 'hl+':     ['fg', 'FzfHlCurrent'],
  \ 'info':    ['fg', 'FzfInfo'],
  \ 'border':  ['fg', 'FzfBorder'],
  \ 'prompt':  ['fg', 'FzfPrompt'],
  \ 'pointer': ['fg', 'FzfPointer'],
  \ 'marker':  ['fg', 'FzfMarker'],
  \ 'spinner': ['fg', 'FzfSpinner'],
  \ 'header':  ['fg', 'FzfHeader'] }

" Some view/ux related stuff
set background=dark
let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=lightgreen   ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=lightcyan ctermbg=10
colorscheme solarized
set ruler                       " show the cursor position all the time
set number                      " show line numbers
set relativenumber              " show relative line numbers (creates 'hybrid' mode with set number)
set cursorline                  " draw a line on the same as the cursor position
set mouse=a                     " enable mouse support
set showcmd                     " display incomplete commands
set title                       " set the screen title to the currently opened file
set gcr=n:blinkon0              " stop blinking cursors
set laststatus=2                " for powerline visiblity

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
set undofile                    " Save undo's after file closes
set undodir=~/.vim/undo         " where to save undo histories

" This sends all yanks to the system clipboard (requires building vim with
" +clipboard support)
set clipboard=unnamed

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"" Whitespace
set nowrap                        " don't wrap lines
set tabstop=4                     " a tab is two spaces
set shiftwidth=4                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the first column when wrap is
                                  " off and the line continues beyond the left of the screen
"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set cc=80                       " set colorcolumn 80 to visualize 80th column

set wildmenu
set wildmode=list:longest,full

"" Get rid of the lag when leaving insert mode
set ttimeoutlen=20

" this is messing with the `build` directory in the CLI
" set wildignore+=*/build/*

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  au FileType conf set ft=sh
  au BufRead,BufNewFile coffee setf coffee
  au BufRead,BufNewFile Jakefile setf javascript
  au BufNewFile,BufRead *.jst set ft=html
  au BufNewFile,BufRead *.template set ft=html
  au BufNewFile,BufRead *.scss set ft=scss.css
  au BufNewFile,BufRead *.json set shiftwidth=2 tabstop=2

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" provide some context when editing
set scrolloff=3


"" Mappings
let mapleader=";"

" Map space to / (search) and control-space to ? (backgwards search)
" map <space> /
" map ✧ ?

" clear the search buffer when hitting ;space
map <silent> <leader>/ :noh<cr>

" disable EX mode
map Q <Nop>

vnoremap . :norm.<CR>

" Quickfix open
nnoremap <leader>qo :copen<CR>

" Quickfix close
nnoremap <leader>qc :ccl<CR>
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ACK
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" supress shell leakage
set shellpipe=>

" Use Ag (silver searcher)
let g:ackprg="ag --nogroup --nocolor --column --path-to-ignore ~/.ignore"

" Don't open first result
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

" Ack for the last search.
nnoremap <silent> <leader>qa/ :execute "Ack! '" . substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""), "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>

" toggle last buffer
nnoremap <leader><leader> <c-^>

" Paste last yanked item, even after deleting.
noremap <Leader>p "0p
noremap <Leader>P "0P

" goto previous buffer, then delete previous buffer (close buffer, keep split)
nmap <leader>d :b#<bar>bd#<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SPLITS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" make splitting more sane
set splitbelow
set splitright
" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" equalize window split
let g:is_full_screen=0
function ToggleFullSplit()
  if g:is_full_screen
    :exe "normal \<c-w>="
    let g:is_full_screen=0
  else
    :exe "normal \<c-w>\<bar>"
    let g:is_full_screen=1
  endif
endfunction
map <c-\> :call ToggleFullSplit()<CR>

" resize windows quickly using arrow keys
nnoremap <Right> :vertical resize +3<cr>
nnoremap <Left> :vertical resize -3<cr>
nnoremap <Up> :resize +3<cr>
nnoremap <Down> :resize -3<cr>

"" Plugin config

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>c :NERDTreeFind<CR>
" quit NERDTree after opening a file
let g:NERDTreeQuitOnOpen = 0

nnoremap <leader>l :TagbarToggle<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>F :Files!<CR>

let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
"
" CtrlP
let g:ctrlp_extensions = ['tag']
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_dotfiles = 0 "so ctrlp won't search dotfiles/dotdirs
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_map = '<leader>f'
let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_custom_ignore = 'build\|git'
let g:ctrlp_regexp = 1
let g:ctrlp_show_hidden = 1

map ✠ o<Esc>
map ✦ O<Esc>j
map <leader>w :FixWhitespace<CR>
set cmdheight=1
let g:Powerline_symbols = 'fancy'

set statusline+=%#warningmsg#
set statusline+=%*

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" JOURNAL
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>j :call ToggleJournal()<CR>
" Toggle Taskpaper Journal
let g:journal_open=0

function ToggleJournal()
  if g:journal_open
    :w
    let buffernumber = str2nr(bufnr('todo'))
    if buffernumber != -1
      :bd todo
      let g:journal_open=0
    endif
  else
    let cwd_journal_exists = filereadable("todo")
    if cwd_journal_exists
      echo 'open (l)ocal journal (in ' . getcwd() . '/) or (g)lobal journal: '
    else
      echo 'create (l)ocal journal (in ' . getcwd() . '/) or open (g)lobal journal: '
    endif
    let input = nr2char(getchar())
    if input == 'l'
      :split todo
      let g:journal_open=1
      if !cwd_journal_exists
        :execute 'normal ' . 'R' . getcwd() . '/'
        :execute 'normal ' . 'oTODOs:'
        :w
      endif
      set ft=plaintasks
    elseif input == 'g'
      :split ~/Dropbox/appdata/todo/todo
      let g:journal_open=1
    endif
  endif
endfunction

" ShowMarks
let g:showmarks_enable=0

" Show currently matched syntax rule
map ,hi :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") .
      \ '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" .
      \ synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" .
      \ " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>

" Override incremental search color
hi! link Search DiffAdd

" Create non-existent parent directories on filesave
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" mapping to open current md file with Marked
nnoremap <leader>md :!open -a "Marked.app" "%:p"<CR>
nnoremap <leader>o :Obsession<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPEN FILES IN DIRECTORY OF CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap %% <C-R>=expand('%:h').'/'<cr>

map <leader>e :edit %%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
command! Rename :call RenameFile()<cr>

" open .vimrc
nmap <leader>v :vs ~/.vimrc <cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STARTIFY SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:startify_custom_header_quotes = [[
  \"Get your ASCII in gear.",
  \"Add a custom signature in ~/.ascii.vim"
\]]

let ascii = $HOME . '/.ascii.vim'
if filereadable(ascii)
  :exec ":source " . ascii
  let g:startify_custom_header = ascii
endif

" vim-test
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

if has('nvim')
    let test#strategy = "neovim"
endif


let g:startify_change_to_dir = 0
let g:startify_bookmarks = [ '~/.dotfiles/vim/vimrc.symlink' ]
let g:startify_files_number = 10
let g:startify_enable_special = 0

autocmd FileType startify setlocal nocursorline

" colors
hi StartifyBracket ctermfg=240
hi StartifyFooter  ctermfg=111
hi StartifyHeader  ctermfg=203
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AIRLINE SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_symbols                         = {}
let g:airline_theme                           = 'powerlineish'
let g:airline#extensions#branch#enabled       = 1
let g:airline#extensions#eclim#enabled        = 1
" vim-powerline symbols
let g:airline_left_sep                        = '⮀'
let g:airline_left_alt_sep                    = '⮁'
let g:airline_right_sep                       = '⮂'
let g:airline_right_alt_sep                   = '⮃'
let g:airline_symbols.branch                  = '⭠'
let g:airline_symbols.readonly                = '⭤'
let g:airline_symbols.linenr                  = '⭡'
let g:airline#extensions#branch#empty_message = ' '

set noshowmode      " remove the default mode indicator
set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

nmap <leader><tab> :Tabularize /
vmap <leader><tab> :Tabularize /
nmap <leader><S-Tab> :Tabularize /\zs<Left><Left><Left>
vmap <leader><S-Tab> :Tabularize /\zs<Left><Left><Left>

let g:jsx_ext_required = 0

autocmd FileType typescript setlocal completeopt+=menu,preview

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['tsserver', 'tslint'],
\   'react': ['eslint']
\}

let g:ale_fixers = {
\    'javascript': ['eslint'],
\    'typescript': ['tslint']
\}

" let g:ale_fix_on_save = 1

" JSON formatting
nnoremap <leader>jq :%!jq .<CR>

" BEGIN CoC configuration
" https://github.com/neoclide/coc.nvim#example-vim-configuration
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
noremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" END CoC configuration
